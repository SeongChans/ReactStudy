리덕스
    - 가장 많이 사용하는 리액트의 상태 관리 라이브러리
    - 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜 더욱 효율적으로 관리할 수 있습니다.
    - 컴포넌트끼리 똑같은 상태를 공유해야 할 때도 여러 컴포넌트를 거치지 않고
        손쉽게 상태 값을 전달하거나 업데이트 할 수 있다.

    - 전역상태를 관리할 때 효과적이다. = ContextAPI도 같은 작업을 할 수 있다.
     -> 프로젝트 규모가 클 경우에는 사용하는 편이 좋다.
    - 코드의 유지 보수성이 높아지고 작업 효율도 극대화 됨
    - 미들웨어라는 기능을 제공하여 비동기 작업을 훨씬 효율적으로 관리할 수 있다.

 액션 - 상태에 어떠한 변화가 필요하면 액션(action)이라는 것이 발생합니다.
    - 하나의 객체로 표현됩니다.
    ex)
    {
        type: 'TOGGLE_VALUE'
    }
    - 액션 객체는 type필드를 가지고 있어야 합니다. == 액션의 이름
     -> 그 외의 값들은 상태 업데이트를 할 떄 참고해야합니다. -> 작성자 마음대로 넣을 수 있다.
    ex)
    {
        type: 'ADD_TODO',
        data: {
            id: 1,
            text: '리덕스 배우기'
        }
    }
    {
        type: 'CHANGE_INPUT',
        text: '안녕하세요'
    }

액션 생성 함수
    - 액션 객체를 만들어 주는 함수
    - 어떠한 변화를 일으킬 때마다 객체를 만들어야 하는데 매번 직접 작성하기 번거로울 수 있고,
        만드는 과정에서 실수로 정보를 누락할 수 있습니다. 이러한 일을 만들기 위해 함수로 작성합니다.
    ex) //화살표함수로도 만들 수 있다.
    function addTOdo(Data) {
        return{
            type: 'ADD_TODO',
            data
        };
    }
    const chageInout = text => ({
        type: 'CHANGE_INPUT',
        text
    });

리듀서(reducer)
    - 변화를 일으키는 함수
    - 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라매터로 받아 옵니다.
        두 값을 참고하여 새로운 상태를 만들어서 반환합니다.
    ex)
    const initialState = {
        counter: 1
    };
    function reducer(state = initialState, action) {
        switch (action.type) {
            case INCREMENT :
            return {
                counter: state.counter + 1
            };
            default:
                return state;
        }
    }

스토어(store)
    - 프로젝트에 리덕스를 적용하기 위해 만든 것
    - 한 프로젝트에 단 한개만 가질 수 있다.
    - 현재 어플리케이션 상태와 리듀서가 들어가 있으며, 그 외에 몇가지 내장 함수가 있다.

디스패치(dispatch)
    - 스토어의 내장함수 중 하나
    - 액션을 발생시키는 것
    - dispatch(action)과 같은 형태로 액션 객체를 파라매터로 넣어서 호출
    - 이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어줍니다.

구독(subscribe)
    - 스토어의 내장함수 중 하나
    - subscribe 함수 안에 리스너 함수를 파라매터로 넣어서 호출해 주면, 이 리스너 함수가 액션이 디스패치되어
        상태가 업데이트 될 때마다 호출됩니다.
    ex)
    const listener = () => {
        console.log('상태가 업데이트됨');
    }
    const unsubscribe = store.subscribe(listener);

    unsubcsribe(); // 추후 구독을 비활성화할 때 함수를 호출

리덕스의 세가지 규칙
    - 1. 단일 스토어
        하나의 어플리케이션 안에는 하나의 스토어가 들어 있습니다.
        (여러개의 스토어를 만들 수는 있으나 상태 관리가 복잡해질 수 있다.)
    - 2. 읽기 전용 상태
        리덕스 상태는 읽기 전용입니다.
         상태를 업데이트할 때 기존의 객체는 건드리지 않고 새로운 객체를 생성해 주어야 합니다
        내부적으로 데이터가 변경되는 것을 감지하기 위해 얕은 비교 검사를 하기 때문입니다.
    - 3. 리듀서는 순수한 함수
        리듀서 함수는 순수한 함수여야합니다
         1) 리듀서 함수는 이전 상태와 액션 객체를 파라매터로 받습니다.
         2) 파라매터 외의 값에는 의존하면 안 됩니다.
         3) 이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환합니다.
         4) 똑같은 파라매터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 합니다.

** 리덕스 내부에 랜덤값을 만들거나, date함수를 사용해 현재 시간을 가져오거나, 네트워크 요청을 한다면
    파라매터가 같아도 다른 결과를 만들 수 있다.이러한 작업은 리듀서 함 바깥에서 처리해야합니다.