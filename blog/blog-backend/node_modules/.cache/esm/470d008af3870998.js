let Koa,Router,bodyParser,mongoose,api,jwtMiddleware,createFakeData;_f38‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_f38‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_f38‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_f38‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_f38‍.w("./api",[["default",["api"],function(v){api=v}]]);_f38‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);_f38‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);require('dotenv').config();





//비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;





mongoose
    .connect(MONGO_URI)
        .then(() => {
            console.log('Connected to MongoDB');
            //createFakeData();
        })
        .catch(e => {
            _f38‍.g.console.error(e);
    });

const app = new Koa();
const router = new Router();

//라우터 설정
router.get('/', ctx => {
    ctx.body = "홈";
});

//라우터 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);


router.get('/about/:name?', ctx => {
    const { name } = ctx.params;
    //name의 존재 유무에 따라 다른 결과 출력
    ctx.body = name ? `${name}의 소개` : '소개';
});

router.get('/posts', ctx => {
    const { id } = ctx.query;
    //id의 존재 유무에 따라 다른 결과 출력
    ctx.body = id ? `포스트 #${id}` : '포스트 아이디가 없습니다.';
});

//라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

//app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
    _f38‍.g.console.log('Listening to port %d', port);
});