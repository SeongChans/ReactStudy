JWT(JSON Web Token) - 데이터가 JSON으로 이루어져 있는 토큰
로그인 상태 인증 방식 - 세션 기반 - 서버가 사용자가 로그인 중임을 기억하고 있다
                                - 사용자가 로그인 하면, 서버는 세션 저장소에 사용자의 정보를 조회하고
                                 세션 ID발급 브라우저의 쿠키에 저장. 사용자가 요청을 보낼 때마다 서버가
                                 세션저장소에서 세션을 조회 후 로그인 여부를 결정하고 작업 처리 및 응답
                                 - 저장소로는 메모리, 디스크, 데이터베이스 등을 사용
                                 - 단점 - 서버전용 데이터베이스를 만들어야 할 수 있음(서버확장이 번거로움)
                     - 토근 기반 - 로그인 이후 서버가 만들어주는 문자열
                                - 문자열 안에는 사용자의 로그인 정보 / 서버에서 발급되었음을 증명하는 서명이 들어있음
                                - 해싱 알고리즘을 통해 만들어짐 ex) HMAC SHA256 / RSA SHA256 알고리즘
                                - 무결성이 보장됨 - 정보가 변경되거나 위조되지 않았음
                                - 로그인하면 서버가 사용자에게 토큰을 발급해주고 API를 요청하면 토큰과 함꼐 요청하고
                                서버는 해당 토큰이 유효한지 검사하고 결과에 따라 작업을 처리하고 응답함
                                - 장점 - 사용하는 리소스가 적다. /  사용자쪽에 토큰을 가지고 있으므로 확장성이 높다.
토큰을 사용하는 방법 - locadlStorage 혹은 sessionStorage 담아서 사용
                        - 사용하기가 편리함 / 구현하기도 쉬움
                        - 악성 스크립트를 삽입하면 쉽게 탈취됨 (XSS - Cross Site Scripting)
                        - XSS는 개발자가 놓치는 다양한 취약점을 통해 공격 할 수 있음
                     - 쿠키에 담아서 사용
                        - httpOnly 속성을 통해 악성 스크립트로부터 보호
                        - 토큰을 쿠키에 담으면 사용자가 서버로 요청 할 떄마다 토큰이 전달되는 점을 이용
                        사용자가 모르는 API요청을 함(CSRF - Cross Site Request Forgery)
                        - CSRF는 Referer 검증 등의 방식으로 막을 수 있음
