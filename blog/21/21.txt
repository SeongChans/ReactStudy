백앤드 - 데이터를 어떻게 보여줄지 또는 몇개씩 보여줄 지 관련 로직을만드는 것을 서버 프로그래밍 또는 백인드라함
    종류 - node.js
            서버에서도 자바스크립트를 사용할 수 잇는 런타임
            node를 통해 자바스크립트 파일을 실행할때는 node src/index.js와 같이 전체 경로를 입력해야함
            단, index.js 파일은 예외로 디렉터리까지만 입력해도 실행 할 수 있습니다.
        - Koa
            node.js 환경에서 사용하는 웹 프레임워크
            미들웨어의 배열로 구성되어 있습니다. 구조 - (ctx, next) => {}
            ctx - context의 줄입말 -> 웹 요청과 응답에 관한 정보를 지니고 있음
            next - 현재 처리 중인 미들웨어의 다음 미들웨어를 호출하는 함수, 호출하지 않는 경우 다음 미들웨어를 처리하지 않음
            app.use를 사용하여 등록되는 순서대로 처리됩니다.
            next();를 이용하여 다음 app.use로 연결
            authorized=1이라는 쿼리 파라미터가 포함되어 있으면 이후 미들웨어를 처리해줍니다.
            next함수를 호출하면 promise를 반환함 -> express와의 차별점
            next함수가 반환하는 promise는 다음에 처리해야할 미들웨어가 끝나야 완료됨
            Koa는 async/await을 정식으로 지원함
            - koa-router - 다른 주소로 요청이 들어올 경우 다른 작업을 처리할 수 있도록 라우터를 사용
                router.get 첫번째 파라미터는 라우터의 경로, 두번째 파라미터에는 해당 라우트에 적용할 미들웨어 함수
                    get의 키워드는 http의 메소드를 의미 (post, put, delete등을 넣을 수 있음)
        - nodemon - 코드를 변경할 떄마다 서버를 자동으로 재시작해주는 툴
        - 라우터의 파라미터와 쿼리를 읽는 법
            - 파라미터를 설정할 때 - /about/:name 형식으로 콜론(:)을 사용하여 라우트 경로를 설정
                파라미터가 있을수도 있고 없을 수도 있으면 /about/:name?같은형식으로 파라미터 이름 뒤에 물음표(?)를 사용
                ctx.params 객체에서 조회할 수 있음
            - url 쿼리 - /post/?id=10 형식으로 요청하면 ctx.query에서 조회할 수 있음
                쿼리 문자열을 자동으로 객체 형태로 파싱해 줌(별도의 파싱 함수를 돌릴 필요가 없음)(문자열 형태의 쿼리 문자열을 조회할 때는 ctx.querystring함수를 사용)
        파라미터와 쿼리는 둘 다 주소를 통해 특정 값을 받아 올 떄 사용
         - 파라미터 - 작업 할 카테고리를 받아오거나, 고유 ID 혹은 이름으로 특정 데이터를 조회할 때 사용
         - 쿼리 - 옵션에 관련된 정보를 받아옴
        - REST API - 브라우저에서 직접 접속하여 데이터를 변경하면 보안상 문제가 발생되기에 해당 API를 이용
                - 클라이언트가 서버에 데이터를 요청하면, 서버는 로직에 따라 데이터베이스에 접근하여 작업을 처리
                - 요청 종류에 따라 다른 HTTP 메서드를 사용
                get - 데이터 조회
                post - 데이터를 등록 / 인증 작업을 거칠 때 사용되기도 함
                delete - 데이터를 지울 때 사용
                put - 데이터를 새 정보로 통째로 교체할 때 사용
                patch - 데이터의 특정 필드를 수정할 때 사용
        - 라우트 모듈화 - 프로젝트 진행시 index.js 파일 하나에 모두  작성하면 너무 길고 유지보수도 어려워짐
        - 컨트롤러 파일 - 라우트 작성 과정에서 특정 경로에 미들웨어를 등록할 때 두번째 인자에 함수를 선언해서 바로 넣어 줄 수 있음
            - 라우트 처리 함수들을 다른 파일로 분리해서 관리 가능(라우트 처리 함수의 코드가 길어 한눈에 보기 힘들기 때문)
            - koa-bodyparser- post/put/patch같은 매서드의 request body에 json 형식으로 데이터를 넣으면, 파싱하여 서버에 적용 할 수 있음

        