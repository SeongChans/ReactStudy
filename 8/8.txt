Hook
 - 함수 컴포넌트에서도 상태 관리를 할 수 있는 useState,
    렌더링 직후 작업을 설정하는 useEffect 등의 기능을 제공하여 기존의 함수 컴포넌트에서
    할 수 없었던 다양한 작업을 할 수 있다.
------------------------------------------------------------------------------------------
 useState
  - 가장 기본적인 Hook이며, 함수 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해줌
  - useState 문법
   import {useState} from "react"

   const [value, setValue] = useState(0); 함수의 파라매터에는 상태의 기본값을 넣어준다.

  - 다수의 state를 동시에 사용 가능하다.
--------------------------------------------------------------------------------------------
useEffect
 - 리액트 컴포넌트가 랜더링 될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook
 - 클래스 형태의 componentDidMount 와 componentDidUpdate를 합친 형태랑 유사하다.
 - 기본적으로 랜더링되고 난 직후마다 실행됨
 - 두번째 파라매터 배열에 무엇을 넣는지에 따라 실행되는 조건이 달라짐 / 빈 파라매터는 처음만 실행
 - 언마운트 되기 전이나 업데이트 되기 전 작업을 수행하고 싶다면 뒷정리 함수를 반환해 주어야함
-----------------------------------------------------------------------------------------------
useReducer
 - useState보다 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트 해주고 싶을 때 사용
 - 리듀서는 현재상태, 액션(업데이트를 위해 필요한 정보를 담아둠)값을 전달받아 새로운 상태를 반환함
 - 불변성을 지켜 주여야 한다.
    function reducer(state, action){
        return {...}; //불변성을 지키면서 업데이트한 새로운 상태를 반환
    } //첫번째 파라매터는 리듀서 함수를 넣고, 두번째 파라매터에는 해당 리듀서의 기본값을 넣어준다
    - 액션 값은 주로 아래의 형태로 이루어짐
    {
        type: 'INCREMENT'
        //다른 값들이 필요하다면 추가로 들어감
    }
 - useReducer에서 사용하는 액션 객체는 반드시 type을 가지고 있을 필요가 없습니다.(문자열이나 숫자도 가능)
 - 가장 큰 장점은 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다.
-------------------------------------------------------------------------------------------------------
 useMemo
  - 함수 컴포넌트 내부에서 발생하는 연산을 최적화할 수 있다.
  - 랜더링하는 과정에서 특정 값이 바뀌었을 떄만 연산을 실행
  - 원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용함
-------------------------------------------------------------------------------------------------------
useCallback
 - 랜더링 성능을 최적화해야 하는 상황에서 사용
 - 만들어 놨던 함수를 재사용
 - 첫번째ㅐ 파라매터에는 생성하고 싶은 함수를 넣고, 두번째 파라매터에는 배열을 넣으면 된다.
 - 빈 배열을 넣으면 컴포넌트가 랜더링 될 때 함수를 계속 재사용
 - 함수 내부에 상태 값에 의존해야 할 경우에는 반드시 두번째 파라매터 안에 포함시켜야 한다.
-------------------------------------------------------------------------------------------------------
useRef
 - ref를 쉽게 사용할 수 있도록 한다.
 - useRef로 만든 객체 안의 current 값이 실제 엘리먼트를 가리킨다.
 - ref 값이 바뀌어도 컴포넌트가 렌더링되지 않는다 - 랜더링과 관련되지 않은 값만 이렇게 관리
--------------------------------------------------------------------------------------------------------
커스텀 Hooks 만들기