스플리팅 - 파일을 분리하는 작업
    효율적인 캐싱 효과를 위해
    어플리케이션의 규모가 커지면 당장 사용하지 않은 컴포넌트으 정보를 모두 불러오지 않게 하기 위해
    코드 비동기 로딩을 통해 필요한 시점에 컴포넌트를 불러와서 사용할 수 있다.
    자바스크립트 합수 비동기 로딩 -> React.lazy와 suspense를 통한 컴포넌트비동기 렌더링
    -> loadable componenets를 통한 컴포넌트 비동기렌더링

    React.lazy는 컴포넌트를 렌더링 하는 시점에서 비동기적으로 로딩할 수 있게 해주는 유틸 함수
    ex) const SplitMe = React.lazy(() => import('./SplitMe));

    Suspense는 리액트 내장 컴포넌트로서 코드 스플리팅된 컴포넌트를 로딩하도록 발동시킬 수 있고,
    로딩이 끝나지 않았을 때 보여 줄 UI를 설정할 수 있습니다.
    ex) import { Suspense } from 'react';
        (...)
        <Suspense fallback={<div>loading...</div>}>
            <SplitMe />
        </Suspense>
    Suspense에서는 fallback props를 통해 로딩 중 보여줄 jsx를 지정할 수 있습니다.

    Loadable Componenets는 코드 스플리팅을 편하게 하도록 도와주는 서드파티 라이브러리
        - 서버 사이드 렌더링을 지원함
        - 렌더링하기 전에 필요할 때 스플리팅된 파일을 미리 불러올 수 있습니다.
    
    서버 사이드 렌더링 - 웹 서비스의 초기 로딩 속도 개선, 캐싱 및 검색 엔진 최적화를 가능하게 해 주는 기술
        - 웹 서비스의 초기 렌더링을 서버쪽에서 처리합니다.
        - 사용자는 서버에서 렌더링한 html 결과물을 받아 와서 그대로 사용
        - 초기 로딩 속도 개선, 크롤링할 때도 문제가 없습니다.