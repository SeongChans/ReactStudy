미들웨어란 - ㅇ앣션과 리듀서 사이의 중간자

액션 -> 미들웨어 -> 리듀서 -> 스토어

    전달받은 액션을 단순히 콘솔에 기록,
    액션을 아예 취소, 다른 종류의 액션을 추가로 디스패치 할 수 있다.

미들웨어 만들기
    (lib/loggerMiddleware참고)
    미들웨어는 결국 함수를 반환하는 함수를 반환하는 함수임
    여기에 있는 함수에서 파라매터로 받아오는 store는 리덕스 스토어 인스턴스를,
    action은 디스패치된 액션을 가리킵니다.
    next 파라매터는 함수형태이며, store.dispatch와 비슷한 역할을 함.
    next(action)을 호출하면 그 다음 처리해야 할 미들웨어에게 액션을 넘겨주고, 없다면 리듀서에게 액션을 넘겨줌

    미들웨어 내부에서 store.dispatch를 사용하면 첫번째 미들웨어부터 다시 처리합니다.
    미들웨어에서 next를 사용하지 않으면 액션이 리듀서에 전달되지 않습니다.(액션이 무시됨)

    1. 이전 상태
    2. 액션 정보
    3. 새로워진 상태

    미들웨어에서는 여러 종류의 작업을 처리할 수 있다.
    특정 조건에 따라 액션을 무시하게 할 수도 있고, 액션 정보를 가로채서 변경한 후 리듀서에게 전달할 수 있다.
    새로운 액션을 여러번 디스패치 할 수도 있다.

    (redux-logger라는 라이브러리가 있음)

    프로젝트에서 비동기 작업을 더욱 효율적으로 관리할 수 있도록 도와주는 라이브러리
        - redux-thunk: 비동기 작업을 처리할 때 가장 많이 사용하는 미들웨어,
            객체가 아닌 함수 형태의 액션을 디스패치할 수 있게 해줍니다.
            가장 기본적으로 사용하는 미들웨어
            thunk란? - 특정 작업을 나중에 할 수 있도록 미루기 위해 함수 형태로 감싼 것
            
        - redux-saga: redux-thunk 다음으로 가장 많이 사용되는 비동기 작업 관련 미들웨어 라이브러리
            특정 액션이 디스패치 되었을 때 정해진 로직에 따라 다른 액션을 디스패치시키는 규칙을 작성하여
            비동기 작업을 처리할 수 있게 해줍니다.
            - redux-saga의 사용 상황
                - 기존 요청을 취소 처리해야 할 때 (불필요한 중복 요청 방지)
                - 특정 액션이 발생했을 때 다른 액션을 발생시키거나, API 요청 등 리덕스와 관계없는 코드를 실행할 때
                - 웹소켓을 사용할 때
                - API 요청 실패 시 재요청해야 할 때
            - 사용 문법 - ES6의 제너레이터 함수 (스위치 함수랑 비슷함)
                function* generatorFunction() {
                    console.log(`안녕하세요`);
                    yield 1;
                    console.log(`네저레이터 함수`);
                    yield 2;
                    console.log(`function*`);
                    yield 3;
                    return 4;
                }
                const generator = generatorFunction();
                generator.next();
                //안녕하세요
                //{value: 1, done: false}
                generator.next();
                //제너레이터 함수
                //{value: 2, done: false}
                generator.next();
                //function*
                //{value: 3, done: false}
                generator.next();
                //{value: 4, done: true}
                generator.next();
                //{value: undefined, done: true}