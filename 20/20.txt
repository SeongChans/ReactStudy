서버 사이드 렌더링
    - UI를 서버에서 렌더링하는 것을 의미합니다.
    - 기본적으론 클라이언트 사이드 렌더링입니다. - 브라우저에서 UI 렌더링을 모두 처리하는 것 - 즉, 자바스크립트를 실행해야 우리가 만든 화면이 사용자에게 보입니다.
    - 장점
        - 웹 어플리케이션의 페이지를 원활하게 수집할 수 있습니다.
            SPA는 JS가 실행되지 않는 환경에서는 페이지가 제대로 나타나지 않을 수 있습니다.
            서버에서 대신 렌더링을 해주면 검색 엔진이 페이지의 내용을 제대로 수집할 수 있습니다.
        - 초기 렌더링 성능을 개선할 수 있습니다. 
            서버사이드 렌더링이 구현되지 않은 웹페이지에 사용자가 방문하면, JS가 로딩되고 실행될 때까지 사용자는 
            빈 페이지를 보며 대기해야 합니다.
            API까지 호출해야 한다면 대기시간이 더욱 길어짐
            서버사이드 렌더링을 구현한 웹페이지는 JS파일 다운로드가 완료되지 않은 시접에서도 html상 사용자가
            볼 수 있는 콘텐츠가 있개 때문에 대기 시간이 최소화 되며, 사용자 경험도 향상됩니다.
    - 단점
        - 브라우저가 해야 할 일을 서버가 대신 하므로 서버 리소스가 사용됨
            수많은 사용자가 동시에 접속하면 과부하가 발생 할 수 있습니다.
            캐싱과 밸런싱을 통해 성능을 최적화해 주어야 합니다.
        - 프로젝트의 구조가 더 복잡해질 수 있고 고려해야할 사항이 많아져 개발이 어려워질 수 있습니다.
    - 서버사이드 렌더링과 코드 스플리팅 충돌
        서버 사이드 렌더링과 코드 스플리팅을 함께 적용하면 특정 흐름에서 페이지에 깜빡임이 발생합니다.
        1. 서버 사이드 렌더링 된 결과물이 브라우저에 나타남
        2. 자바스크립트 파일 로딩 시작
        3. 자바스크립트가 실행되며넛 아직 불러오지 않은 컴포넌트를 null로 렌더링함
        4. 페이지에서 코드 스플리팅된 컴포넌트들이 사라짐
        5. 코드 스플리팅된 컴포넌트들이 로딩된 이후 제대로 나타남
        이러한 이슈를 해결하기 위해서는 라우트 경로마다 코드 스플리팅된 파일 중에서 필요한 모든 파일을
        브라우저에서 렌더링하기 전에 미리 불러와야 합니다.
    - 웹팩과 로더
        - 웹팩을 통해 빌드할 떄 어떤 파일에서 시작해 파일들을 불러오는지,
        또 어디에 결과물을 저장할지 정해줍니다.
        - 로더를 설정하여 파일을 불러올 때 확장자에 맞게 필요한 처리를 해줍니다.
        JS는 babel을 사용해 트랜스파일링을 해줍니다.
        CSS는 모든 CSS코드를 결합해줍니다. 이미지 파일은 다른 경로에 따로 저장하고 그 파일에 대한
        경로를 JS에 참조할 수 있게 해줍니다.